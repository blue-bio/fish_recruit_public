---
title: "fish_recruits_fishdata_clean"
format: html
editor: source
---

#Set-up
##Load packages
```{r Preperations}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse) #for data wrangling
library(cmdstanr)   #for cmdstan
library(brms)       #for fitting models in STAN
library(standist)   #for visualizing distributions
library(HDInterval) #for HPD intervals
library(posterior)  #for posterior draws
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(rstan)      #for interfacing with STAN
library(effects)   #for partial effects plots
library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(ggfortify) #for model diagnostics
library(sjPlot)    #for outputs
library(knitr)     #for kable
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(MuMIn)     #for AICc
library(tidybayes)
library(broom.mixed)#for tidying MCMC outputs
library(patchwork)  #for multiple plots
library(ggeffects)
library(DHARMa)
library(ggridges)
library(bayestestR) #for ROPE
library(see)        #for some plots
library(easystats)     #framework for stats, modelling and visualisation 
library(dplyr)
library(plyr)
library(ggimage)
source('../helperFunctions.R') 

```

##Read in data: Grazing
```{r} 
#| label: read grazing data
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

fish_g <- read_csv('../data/fish_grazing.csv', trim_ws = TRUE)        
#read in the fish grazing data 

fish_g <- fish_g |> mutate(treatment = factor(treatment),
                       treatment_rep = factor(treatment_rep), 
                       coral_species = factor(coral_species), 
                       tile_rep = factor(tile_rep), 
                       video_rep = factor(video_rep))  
#make categorical variables factors

fish_g_sum <- 
  fish_g |> 
  dplyr::group_by(treatment, treatment_rep, video_rep, coral_species, tile_rep) |> 
  dplyr::summarise(flurries = max(flurry), 
            bites_t = sum(bites)) 
#summarises total bites and flurries per tile per 5 min replicate (video)

fish_g_sum$tile_status <- with(fish_g_sum, ifelse(coral_species=="not_tile", "not_tile", "coral_tile")) 
fish_g_sum <- fish_g_sum |> mutate(tile_status = factor(tile_status))
#makes a coral tile vs not-coral tile factor to help summarise the data

fish_g_sum_t <- 
  fish_g_sum |> 
  dplyr::group_by(treatment, treatment_rep, video_rep, tile_status) |> 
  dplyr::summarise(flurries = sum(flurries), 
            bites_t = sum(bites_t)) 
#summarises total bites on coral tiles vs not on tiles for each 5 min replicate (video)

fish_g_sum_t <- fish_g_sum_t |> mutate(treament_rep_r = factor(paste(treatment,treatment_rep)))
#makes a block within each treatment for each replicate tank
```

##Read in data: Sizes
```{r} 
#| label: read fish size data
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

fish_size <- read_csv('../data/fish_size.csv', trim_ws = TRUE) 
fish_size <- fish_size |> mutate(treatment = factor(treatment),
                       treatment_rep = factor(treatment_rep), 
                       area = as.numeric(area, na.rm = TRUE))   
#read in data and set variables as factors or numbers as needed

fish_size_body <- fish_size |> dplyr::filter(bite_number %in% c("1", "na"))
#get just body sizes, not double entries because of bite scar numbers 

```

##Read in data: Manual cleaning
```{r} 
#| label: read manual data
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
manual <- read_csv('../data/manual_cleaning.csv', trim_ws = TRUE)
manual <- manual |> mutate(treatment = factor(treatment),
                       treatment_rep = factor(treatment_rep), 
                       coral_species = factor(coral_species), 
                       tile_rep = factor(tile_rep), 
                       cleaning_effort = factor(cleaning_effort))
#read in manual cleaning data and make variables factors as needed
```

##Read in models
```{r}
#| label: load models
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
#Bayesian models used in the manuscript, generated from the forms below
load("../models/fish_graze_brm_7_b.RData")   #Fish grazing rate
```

#Fish grazing rates
##Negaitve binomial model
###Run model
```{r}
#| label: model 7 - form
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true 

#set model formula, family and link function
fish_graze_form_7 <- bf(bites_t ~ treatment*tile_status + (1|treament_rep_r), 
                        family = negbinomial(link = "log"))  

#set priors
fish_graze_priors_7 <- prior(normal(1.8, 2.2), class = 'Intercept') + 
  prior(normal(0, 1), class = 'b') + 
  prior(student_t(3, 0, 3), class = 'sd') + 
  prior(gamma(0.01, 0.01), class = 'shape')

#run model
fish_graze_brm_7_b <- brm(fish_graze_form_7, 
                 data = fish_g_sum_t,
                 prior = fish_graze_priors_7, 
                 sample_prior = 'yes',
                 iter = 10000, 
                 warmup = 5000, 
                 chains = 3, 
                 cores = 3, 
                 thin = 10, 
                 refresh = 0, 
                 seed = 123, 
                 control = list(adapt_delta = 0.99),
                 backend = "cmdstan") 

```

###Sampling diagnostics + model validation
```{r}
#| label: model 7 - sampling diagnostics + model validation
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true 
#check conditonal effects are within reasonable limits
fish_graze_brm_7_b |> 
  conditional_effects("treatment:tile_status") |> 
  plot(points = TRUE) 

#MCMC sampler checks
fish_graze_brm_7_b$fit |> stan_trace(inc_warmup = TRUE)
fish_graze_brm_7_b$fit |> stan_ac() 
fish_graze_brm_7_b$fit |> stan_rhat() 
fish_graze_brm_7_b$fit |> stan_ess() 


#Posterior probability check and DHARMA residuals
fish_graze_brm_7_b |> brms::pp_check(type = 'dens_overlay', ndraws = 200) + theme_classic() + scale_x_continuous(limits = c(0, 100))

fish_g_7_b.resids <- make_brms_dharma_res(fish_graze_brm_7_b, integerResponse = TRUE)  
wrap_elements(~testUniformity(fish_g_7_b.resids)) + 
  wrap_elements(~plotResiduals(fish_g_7_b.resids, quantreg = TRUE)) +
  wrap_elements(~testDispersion(fish_g_7_b.resids))

```

##Model Investigations 
###Partial effects plot
```{r}
#| label: model 7 - partial effects plot
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true 
#Set fish order for plots
fish_level_order <- c('cbinotatus', 'sfasciatus', 'anigrofuscus', 'zscopas') 
fish_level_labels <- c('C. binotatus', 'S. fasciatus', 'A. nigrofuscus', 'Z. scopas')

#Make summary of model outputs (median and 95% credibility interval as highest posterior density interval)
grazing_means_7 <- fish_graze_brm_7_b |> 
  emmeans(~treatment:tile_status, type = 'response') |>  
  as.data.frame()
  
#make plot that displays mean and HDCI as bites per minute 
ggplot(grazing_means_7, aes(x=factor(treatment, levels = fish_level_order), y = prob/5, colour = tile_status)) +  
  geom_pointrange(aes(ymin = lower.HPD/5, ymax = upper.HPD/5), 
                  fatten = 5, 
                  position = position_dodge(width=0.75)) + 
  theme_classic() + 
  theme(legend.position = "right", 
        text = element_text(size=15),
        axis.text.y = element_text(colour = "black"), 
        axis.text.x = element_text(angle = 45, 
                                   colour = "black", 
                                   vjust =1, 
                                   hjust = 1, 
                                   face = "italic")) +
  scale_colour_discrete(name = "Bite location", labels = c("Coral tile", "Tank or shelter")) +
  scale_x_discrete(name = "", 
                   breaks = waiver(), 
                   labels = fish_level_labels) + 
  scale_y_continuous(expression(Bites~per~min), 
                     limits = c(0,15), 
                     breaks = c(0, 5, 10, 15))

```

###Pairwise comparisons
```{r}
#| label: model 7 - pairwise comparisons
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

sTreat <- fish_graze_brm_7_b$data |> pull(treatment) |> levels()
STreat <- rep(1, length(sTreat))
names(STreat) <- sTreat

fish_graze_brm_7_b |> emmeans(~treatment|tile_status) |> 
  gather_emmeans_draws() |>  
  dplyr::mutate(.value = exp(.value)) |> 
  ungroup() |>
  group_by(tile_status, .draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat, type = "Tukey")), 
                           fit = t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))))) |> 
  unnest(fit) |> 
  group_by(contrast, tile_status) |> 
  dplyr::summarise(median_hdci(fit),
            Pl = mean(fit<0),
            Pg = mean(fit>0))
#absolute difference between the fish species comparing bite rates on tile vs not_tile

fish_graze_brm_7_b |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  dplyr::mutate(.value = exp(.value)) |> 
  ungroup() |>
  group_by(.draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat, type = "Tukey")), 
                           fit = t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))))) |> 
  unnest(fit) |> 
  group_by(contrast) |> 
  dplyr::summarise(median_hdci(fit),
            Pl = mean(fit<0),
            Pg = mean(fit>0))
#absolute difference between the fish species overall (bites on both tile and not tile)

sTreat2 <- fish_graze_brm_7_b$data |> pull(tile_status) |> levels()
STreat2 <- rep(1, length(sTreat2))
names(STreat2) <- sTreat2

fish_graze_brm_7_b |> emmeans(~tile_status|treatment) |> 
  gather_emmeans_draws() |>  
  dplyr::mutate(.value = exp(.value)) |> 
  ungroup() |>
  group_by(treatment, .draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat2, type = "Tukey")), 
                           fit = t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat2, type = "Tukey"))))) |> 
  unnest(fit) |> 
  group_by(contrast, treatment) |> 
  dplyr::summarise(median_hdci(fit),
            Pl = mean(fit<0),
            Pg = mean(fit>0))
#absolute difference within the fish species comparing bite rates on tile vs not_tile

```

#Body size and bite-scar analysis 
##Body size summary
```{r} 
#| label: size - 1
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

fish_size_body |> ddply("treatment", summarise, 
                                  tl_mean = mean(total_length), 
                                  sw_m = mean(snout_width),
                                  sw_sd = sd(snout_width),
                                  sl_m = mean(snout_length),
                                  sl_sd = sd(snout_length),
                                  bw_m = mean(body_width), 
                                  stl_m = mean(standard_length), 
                                  stl_sd = sd(standard_length),
                                  bd_m = mean(body_depth))
```

##Bite-scar size summary
```{r} 
#| label: size - 2
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

fish_size |> group_by(treatment, treatment_rep) |> 
  dplyr::summarise(max(snout_length), 
         max(snout_width), 
         mean(area),
         sd(area),
         count(area > 0))

#overall
fish_size |> group_by(treatment) |> 
  dplyr::summarise(mean(area, na.rm = TRUE),
                   sd(area, na.rm = TRUE),
                   count(area > 0))

fish_size_body |> ddply("treatment", summarise, 
                                  tl_mean = mean(total_length), 
                                  sw_m = mean(snout_width),
                                  sw_sd = sd(snout_width),
                                  sl_m = mean(snout_length),
                                  sl_sd = sd(snout_length),
                                  bw_m = mean(body_width), 
                                  stl_m = mean(standard_length), 
                                  stl_sd = sd(standard_length),
                                  bd_m = mean(body_depth)) 
#individual fish
fish_size_means <- fish_size |> group_by(treatment, treatment_rep) |> 
  dplyr::summarise(bite_area = mean(area, na.rm = TRUE),
                   sd(area, na.rm = TRUE),
                   count(area > 0), 
                   sw = max(snout_width)) |> 
  as.data.frame()
```

#Manual cleaning time
```{r} 
#| label: manual 
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false
#Summarise
manual_means <- manual |> group_by(treatment_rep) |> 
  dplyr::summarise(time = max(total_time)) |> 
  as.data.frame()

#convert to minutes
manual_means |> dplyr::summarise(mean(time)/60, 
                                 sd(time)/60)
```












